#!/usr/bin/env python

import logging, yaml, subprocess, io, sys, os, socket
from logging import info,warning,error


def is_port_free(port: int) -> bool:
    s = socket.socket()
    try:
        s.bind(('localhost',port))
        return True
    except:
        pass
    return False

def find_next_free_port(port: int) -> int:
    while not is_port_free(port):
        port += 1
    return port


class App:
    def __init__(self, conf_dir: str):
        os.chdir(conf_dir)
        conf = yaml.safe_load(open('vmconfig.yml', 'r'))

        self._load_conf(conf)



    def _load_conf(self, conf: dict) -> None:


        def _wrap_scalar_as_list(scalar_or_list_value):
            return scalar_or_list_value if type(scalar_or_list_value) == list else [scalar_or_list_value]

        if 'disk' in conf:
            self.first_disk = conf['disk']
        elif 'disks' in conf:
            self.first_disk = conf['disks'][0]
        else:
            self.first_disk = None

        if 'disk' in conf:
            self.disks = [conf['disk']]
        elif 'disks' in conf:
            self.disks = conf['disks']
        else:
            self.disks = []

        self.name = conf['name']
        self.cpus = conf['cpus']
        self.ram = conf['ram']
        self.spice_port = conf['spice_port'] if 'spice_port' in conf else 'auto'
        self.boot_efi = conf['efi'] if 'efi' in conf else False
        self.disk_virtio_mode = conf['disk_virtio'] if 'disk_virtio' in conf else 'blk'
        self.usbdevices =_wrap_scalar_as_list(conf['usb']) if 'usb' in conf else []
        self.share_dir_as_fat = conf['share_dir_as_fat'] if 'share_dir_as_fat' in conf else None
        self.share_dir_as_fsd = conf['share_dir_as_fsd'] if 'share_dir_as_fsd' in conf else None
        self.use_nic = conf['nic'] if 'nic' in conf else True
        self.use_nic_virtio = conf['nic_virtio'] if 'nic_virtio' in conf else True
        self.nic_forward_ports = conf['nic_forward_ports'] if 'nic_forward_ports' in conf else None
        self.enable_boot_menu = conf['bootmenu'] if 'bootmenu' in conf else False
        self.isoimages = _wrap_scalar_as_list(conf['os_install']) if 'os_install' in conf else []


    def _exec(self, executable_name: str, args: list[str]) -> int:
        real_args = [executable_name] + args
        info('running %s with args: %s', executable_name, " ".join(real_args))
        proc = subprocess.Popen(args=real_args,stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        info('-'*80)
        for line in io.TextIOWrapper(proc.stdout, encoding='utf-8'):
            info(line.rstrip())
        exit_code = proc.wait()
        info('-'*80)
        info('%s exited with code %d', executable_name, exit_code)
        return exit_code

    def act_init(self):
        info('action: initializing vm')

        if self.first_disk is not None:
            if os.path.exists(self.first_disk):
                error('disk already exists, not overwriting: %s', self.first_disk)
                return
            else:
                self._exec('qemu-img', ['create', '-f', 'qcow2', self.first_disk, '100G'])
        else:
            error('no disks configured?')

    def _common_args(self):
        spice_port = self.spice_port
        if spice_port == 'auto':
            spice_port = find_next_free_port(5900)
        info(f'SPICE server running on localhost:{spice_port}')
        args = [
            '-name', self.name,
            '-machine', 'q35,accel=kvm',
            '-cpu', 'host',
            '-smp', str(self.cpus),
            '-m', self.ram,

            # display:
            '-display', 'gtk',
            #'-display', 'sdl,gl=on',
            '-vga', 'qxl',
            # '-vga', 'virtio-vga-gl',

            # SPICE:           
            '-spice', f'port={spice_port},disable-ticketing=on,gl=off',
            '-device', 'virtio-serial-pci',
            '-device', 'virtserialport,chardev=spicechannel0,name=com.redhat.spice.0',
            '-chardev', 'spicevmc,id=spicechannel0,name=vdagent',

            # audio:
            '-audiodev', 'pa,id=snd0', '-device', 'ich9-intel-hda', '-device', 'hda-output,audiodev=snd0',
            # '-audiodev', 'pa,id=snd0', '-device', 'AC97,audiodev=snd0',
            # '-audiodev', 'pa,id=snd0', '-device', 'sb16,audiodev=snd0',

            # usb:
            '-device', 'qemu-xhci',

            '-usbdevice', 'keyboard',
            '-usbdevice', 'mouse',
            '-usbdevice', 'tablet',

            # misc:
            #'-balloon', 'virtio',
            #'-localtime',
        ]

        if self.boot_efi:
            edk2_path = '/usr/share/edk2/x64/'

            if os.path.exists(f'{edk2_path}OVMF_CODE.fd') and os.path.exists(f'{edk2_path}OVMF_VARS.fd'):

                if not os.path.exists('./OVMF_VARS.fd'):
                    info('OVMF_VARS.fd file does not exist in VM directory, copying from system')
                    self._exec('cp', [edk2_path + 'OVMF_VARS.fd', '.'])

                args += [
                    '-drive', f'if=pflash,format=raw,readonly=on,file={edk2_path}OVMF_CODE.fd',
                    '-drive',  'if=pflash,format=raw,file=OVMF_VARS.fd',
                ]
            else:
                #error('edk2 files not found. Please install edk2-ovmf package.')
                raise FileNotFoundError('edk2 files not found. Please install edk2-ovmf package.')



        def generate_blockdev_desc(idx: int, filename: str,disk_virtio_mode: str) -> list[str]:
            if '/dev' in filename:
                d = [
                    '-drive', f'file={filename},format=raw,media=disk',
                ]
            else:                
                d = [ 
                    '-drive', f'file={filename},if=none,id=hd{idx}',
                ]

                if disk_virtio_mode == 'scsi':
                    d += [
                        '-device', f'scsi-hd,drive=hd{idx},bootindex={idx+1}',
                    ]
                elif disk_virtio_mode == 'blk':
                    d += [
                        '-device', f'virtio-blk-pci,id=virtblk{idx},num-queues=4,drive=hd{idx},bootindex={idx+1}',
                        ]
                else:
                    d += [
                        '-device', f'ide-hd,drive=hd{idx},bootindex={idx+1}',
                    ]
            return d

        if self.disk_virtio_mode == 'scsi':
            args += [ '-device', 'virtio-scsi-pci,id=scsi0,num_queues=4' ]
        for idx in range(len(self.disks)):
            args += generate_blockdev_desc(idx, self.disks[idx], self.disk_virtio_mode)

        for usb_dev in self.usbdevices:
            vendor_id,product_id = usb_dev.split(':')
            args += [ '-device', f'usb-host,vendorid=0x{vendor_id},productid=0x{product_id}' ]


        if self.share_dir_as_fat is not None:
            args += [
                # '-blockdev', f'driver=vfat,file=fat:ro:{self.share_dir_as_fat},id=vfat,format=raw,if=none',
                # '-device', 'usb-storage,drive=vfat',

                #'-hda', f'fat:ro:{self.share_dir_as_fat}',

                '-drive', f'file=fat:rw:{self.share_dir_as_fat},format=raw,media=disk',
            ]

        if self.share_dir_as_fsd is not None:
            dir_abs = os.path.abspath(self.share_dir_as_fsd)
            args += [
                '-fsdev', f'local,security_model=passthrough,id=fsdev0,path={dir_abs}',
                '-device', 'virtio-9p-pci,fsdev=fsdev0,mount_tag=hostshare',
            ]

        # network:
        # https://wiki.qemu.org/Documentation/Networking
    
        if self.use_nic:
            nic_model = 'virtio-net-pci' if self.use_nic_virtio else 'e1000'
            if self.nic_forward_ports is not None:
                hostfwd_list = list(map(lambda bind_spec: f"hostfwd=tcp::{bind_spec['host']}-:{bind_spec['guest']}" , self.nic_forward_ports))
                hostfwd = ','+','.join(hostfwd_list)
            else:
                hostfwd = ''            
            args += ['-netdev', f'user,id=net0{hostfwd}', '-device', f'{nic_model},netdev=net0' ]
        else:
            args += [ '-nic', 'none' ]
        
        return args
    
    def _boot_args(self, mode: str):
        args = []
        if self.enable_boot_menu:
            args = [ '-boot', 'menu=on', ]
        else:
            if mode == 'install':
                # boot from CD-ROM first, switch back to default order after reboot
                args = [ '-boot', 'once=d', ]
            elif mode == 'run':
                args = [ '-boot', 'order=c', ]
        return args


    def act_install(self):
        info('action: installing operating system inside vm')
        args = self._common_args() + self._boot_args(mode='install')
        for isofile in self.isoimages:
            args += ['-drive', f'file={isofile},media=cdrom' ]
        self._exec('qemu-system-x86_64', args)


    def act_run(self):
        info('action: running vm')
        args = self._common_args() + self._boot_args(mode='run')

        self._exec('qemu-system-x86_64', args)


def usage():
    print('A very simple shell for setting up and running QEMU virtual machines from yaml config')
    print()
    print('usage: vmvm ACTION [VM_CONF_DIR]')
    print()
    print('  ACTION = init | install | run')
    print('    init        create virtual disks')
    print('    install     boot from os_install device to install operating system')
    print('    run         boot from first hard disk')
    print()
    print('  VM_CONF_DIR   dir must contain vmconfig.yml. All paths in config are relative to this dir. Uses current dir by default.')


def main():
    logging.basicConfig(format='%(asctime)s  %(levelname)s  %(message)s', level=logging.INFO)

    cmd = None
    dir_name = './'
    for arg in sys.argv[1:]:
        if arg in ['init', 'install', 'run']:
            cmd = arg
        else:
            dir_name = arg

    if cmd is None:
        error('action not specified')
        usage()
        return

    if dir_name is None:
        error('vm conf directory not specified')
        usage()
        return

    app = App(dir_name)
    getattr(app,'act_'+cmd)()


if __name__ == '__main__':
    main()
