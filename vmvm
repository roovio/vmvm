#!/usr/bin/env python

import logging, yaml, subprocess, io, sys, os, socket
from logging import info,warning,error


def _wrap_scalar_as_list(scalar_or_list_value):
    return scalar_or_list_value if type(scalar_or_list_value) == list else [scalar_or_list_value]

def is_port_free(port: int) -> bool:
    s = socket.socket()
    try:
        s.bind(('localhost',port))
        return True
    except:
        pass
    return False

def find_next_free_port(port: int) -> int:
    while not is_port_free(port):
        port += 1
    return port


class App:
    def __init__(self, conf_dir: str):
        os.chdir(conf_dir)
        self._conf = yaml.safe_load(open('vmconfig.yml', 'r'))

    def _exec(self, executable_name: str, args: list[str]) -> int:
        real_args = [executable_name] + args
        info('running %s with args: %s', executable_name, " ".join(real_args))
        proc = subprocess.Popen(args=real_args,stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        info('-'*80)
        for line in io.TextIOWrapper(proc.stdout, encoding='utf-8'):
            info(line.rstrip())
        exit_code = proc.wait()
        info('-'*80)
        info('%s exited with code %d', executable_name, exit_code)
        return exit_code

    def act_init(self):
        info('action: initializing vm')
        
        if 'disk' in self._conf:
            first_disk = self._conf['disk']
        elif 'disks' in self._conf:
            first_disk = self._conf['disks'][0]
        else:
            first_disk = None
        if first_disk is not None:
            if os.path.exists(first_disk):
                error('disk already exists, not overwriting: %s', first_disk)
                return
            else:
                self._exec('qemu-img', ['create', '-f', 'qcow2', first_disk, '100G'])
        else:
            error('no disks configured?')

    def _common_args(self):
        spice_port = self._conf['spice_port'] if 'spice_port' in self._conf else 'auto'
        if spice_port == 'auto':
            spice_port = find_next_free_port(5900)
        info(f'SPICE server running on localhost:{spice_port}')
        args = [
            '-name', f"vm:{self._conf['name']} spice:{spice_port}",
            '-machine', 'q35,accel=kvm',
            '-cpu', 'host',
            '-smp', str(self._conf['cpus']),
            '-m', self._conf['ram'],

            # display:
            '-display', 'gtk',
            #'-display', 'sdl,gl=on',
            '-vga', 'qxl',
            # '-vga', 'virtio-vga-gl',

            # SPICE:           
            '-spice', f'port={spice_port},disable-ticketing=on,gl=off',
            '-device', 'virtio-serial-pci',
            '-device', 'virtserialport,chardev=spicechannel0,name=com.redhat.spice.0',
            '-chardev', 'spicevmc,id=spicechannel0,name=vdagent',

            # audio:
            '-audiodev', 'pa,id=snd0', '-device', 'ich9-intel-hda', '-device', 'hda-output,audiodev=snd0',
            # '-audiodev', 'pa,id=snd0', '-device', 'AC97,audiodev=snd0',
            # '-audiodev', 'pa,id=snd0', '-device', 'sb16,audiodev=snd0',

            # usb:
            '-device', 'qemu-xhci',

            '-usbdevice', 'keyboard',
            '-usbdevice', 'mouse',
            '-usbdevice', 'tablet',

            # misc:
            #'-balloon', 'virtio',
            #'-localtime',
        ]

        def generate_blockdev_desc(idx: int, filename: str,use_virtio_scsi: bool) -> list[str]:
            # d = [ '-drive', f'file={filename},if=virtio,drive=hd{idx},bootindex={idx+1}' ]
            if '/dev' in filename:
                d = [
                    '-drive', f'file={filename},format=raw,media=disk',
                ]
            else:
                d = [
                    '-blockdev', f'driver=file,node-name=hd{idx}_file,filename={filename}',
                    '-blockdev', f'driver=qcow2,file=hd{idx}_file,node-name=hd{idx}',
                ]
                if use_virtio_scsi:
                    d += [
                        '-device', 'virtio-scsi-pci',
                        '-device', f'scsi-hd,drive=hd{idx},bootindex={idx+1}'
                    ]
                else:
                    d += [
                        '-device', f'ide-hd,drive=hd{idx},bootindex={idx+1}'
                    ]
            return d
        use_virtio_scsi =self._conf['disk_virtio'] if 'disk_virtio' in self._conf else True
        if 'disk' in self._conf:
            args += generate_blockdev_desc(0, self._conf['disk'], use_virtio_scsi)
        elif 'disks' in self._conf:
            for idx in range(len(self._conf['disks'])):
                args += generate_blockdev_desc(idx, self._conf['disks'][idx], use_virtio_scsi)

        if 'usb' in self._conf:
            for usb_dev in _wrap_scalar_as_list(self._conf['usb']):
                vendor_id,product_id = usb_dev.split(':')
                args += [ '-device', f'usb-host,vendorid=0x{vendor_id},productid=0x{product_id}' ]


        if 'ro_mount' in self._conf:
            args += [
                # '-blockdev', f'driver=vfat,file=fat:ro:{self._conf["ro_mount"]},id=vfat,format=raw,if=none',
                # '-device', 'usb-storage,drive=vfat',

                #'-hda', f'fat:ro:{self._conf["ro_mount"]}',

                '-drive', f'file=fat:rw:{self._conf["ro_mount"]},format=raw,media=disk',
            ]

        
        # network:
        use_nic = self._conf['nic'] if 'nic' in self._conf else True
        use_nic_virtio = self._conf['nic_virtio'] if 'nic_virtio' in self._conf else True
        if use_nic:
            nic_model = 'virtio-net-pci' if use_nic_virtio else 'e1000'
            args += [ '-nic', f'user,ipv6=off,model={nic_model}' ]
        else:
            args += [ '-nic', 'none' ]

        
        return args


    def act_install(self):
        info('action: installing operating system inside vm')
        args = self._common_args()
        args += [
            '-boot', 'once=d',  # boot from CD-ROM first, switch back to default order after reboot
        ]
        for isofile in _wrap_scalar_as_list(self._conf['os_install']):
            args += ['-drive', f'file={isofile},media=cdrom' ]
        self._exec('qemu-system-x86_64', args)


    def act_run(self):
        info('action: running vm')
        args = self._common_args()
        args += [
            '-boot', 'order=cd',
        ]
        self._exec('qemu-system-x86_64', args)


def usage():
    print('A very simple shell for setting up and running QEMU virtual machines from yaml config')
    print()
    print('usage: vmvm ACTION VM_CONF_DIR')
    print()
    print('  ACTION = init | install | run')
    print('    init        create virtual disks')
    print('    install     boot from os_install device to install operating system')
    print('    run         boot from first hard disk')
    print()
    print('  VM_CONF_DIR   dir must contain vmconfig.yml. All paths in config are relative to this dir')


def main():
    logging.basicConfig(format='%(asctime)s  %(levelname)s  %(message)s', level=logging.INFO)

    cmd = None
    dir_name = None
    for arg in sys.argv[1:]:
        if arg in ['init', 'install', 'run']:
            cmd = arg
        else:
            dir_name = arg

    if cmd is None:
        error('action not specified')
        usage()
        return

    if dir_name is None:
        error('vm conf directory not specified')
        usage()
        return

    app = App(dir_name)
    getattr(app,'act_'+cmd)()


if __name__ == '__main__':
    main()
